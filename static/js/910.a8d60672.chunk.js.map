{"version":3,"file":"static/js/910.a8d60672.chunk.js","mappings":"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","sources":["images/search.svg","webpack://dashboard/./src/components/Title/Title.module.scss?ae23","components/Title/Title.js","redux/customers/customers-selectors.js","webpack://dashboard/./src/components/Customer/CustomerForm/CustomerForm.module.scss?b345","components/Customer/CustomerForm/CustomerForm.js","webpack://dashboard/./src/components/Customer/CustomerList/CustomerList.module.scss?2818","helpers/usePagination.js","components/Customer/CustomerList/CustomerList.js","webpack://dashboard/./src/components/Customer/FilterCustomer/FilterCustomer.module.scss?6f4f","components/Customer/FilterCustomer/FilterCustomer.js","pages/CustomersPage.js"],"sourcesContent":["var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSearch(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11 19a8 8 0 1 0 0-16 8 8 0 0 0 0 16ZM21 21l-4.35-4.35\",\n    stroke: \"#7E7E7E\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSearch);\nexport default __webpack_public_path__ + \"static/media/search.2a29ca8cd0b7613f6cdd773e42385640.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"Title\":\"Title_Title__x4Vbd\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Title.module.scss\";\r\n\r\nconst Title = ({ title }) => <h3 className={styles.Title}>{title}</h3>;\r\nexport default Title;\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","export const getCustomers = (state) => state.customers.items;\r\nexport const getFilter = (state) => state.customers.filter;\r\n\r\nexport const getVisibleCustomers = (state) => {\r\n  const items = getCustomers(state);\r\n  const filter = getFilter(state);\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return items.filter(({ customerName }) =>\r\n    customerName.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"CustomerForm\":\"CustomerForm_CustomerForm__0xotJ\",\"CustomerForm__label\":\"CustomerForm_CustomerForm__label__luUHX\",\"CustomerForm__input\":\"CustomerForm_CustomerForm__input__Psf6a\"};","import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { Button } from \"@mui/material\";\r\nimport { addCustomers } from \"../../../redux/customers/customers-actions\";\r\nimport { getCustomers } from \"../../../redux/customers/customers-selectors\";\r\nimport styles from \"./CustomerForm.module.scss\";\r\n\r\nfunction CustomerForm() {\r\n  const [customerName, setCustomerName] = useState(\"\");\r\n  const [company, setCompany] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const customers = useSelector(getCustomers);\r\n  const dispatch = useDispatch();\r\n\r\n  const customerNameInputId = nanoid();\r\n  const companyInputId = nanoid();\r\n  const phoneNumberInputId = nanoid();\r\n  const emailInputId = nanoid();\r\n  const countryInputId = nanoid();\r\n  const statusInputId = nanoid();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case \"customerName\":\r\n        setCustomerName(value);\r\n        break;\r\n      case \"company\":\r\n        setCompany(value);\r\n        break;\r\n      case \"phoneNumber\":\r\n        setPhoneNumber(value);\r\n        break;\r\n      case \"email\":\r\n        setEmail(value);\r\n        break;\r\n      case \"country\":\r\n        setCountry(value);\r\n        break;\r\n      case \"status\":\r\n        setStatus(value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const normalizedName = customerName.toLowerCase();\r\n    const isNameInCustomers = customers.some((customer) =>\r\n      customer.customerName?.toLowerCase().includes(normalizedName)\r\n    );\r\n\r\n    if (isNameInCustomers) {\r\n      setCustomerName(\"\");\r\n      setCompany(\"\");\r\n      setPhoneNumber(\"\");\r\n      setEmail(\"\");\r\n      setCountry(\"\");\r\n      setStatus(\"\");\r\n      toast.info(`${customerName} is already in list of customers.`);\r\n    }\r\n\r\n    if (!isNameInCustomers) {\r\n      dispatch(\r\n        addCustomers({\r\n          customerName,\r\n          company,\r\n          phoneNumber,\r\n          email,\r\n          country,\r\n          status,\r\n        })\r\n      );\r\n\r\n      setCustomerName(\"\");\r\n      setCompany(\"\");\r\n      setPhoneNumber(\"\");\r\n      setEmail(\"\");\r\n      setCountry(\"\");\r\n      setStatus(\"\");\r\n      toast.success(`${customerName} added to customers.`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className={styles.CustomerForm} onSubmit={handleSubmit}>\r\n      <label\r\n        className={styles.CustomerForm__label}\r\n        htmlFor={customerNameInputId}\r\n      >\r\n        <input\r\n          className={styles.CustomerForm__input}\r\n          type=\"text\"\r\n          name=\"customerName\"\r\n          value={customerName}\r\n          htmlFor={customerNameInputId}\r\n          onChange={handleChange}\r\n          placeholder=\"Name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={styles.CustomerForm__label} htmlFor={companyInputId}>\r\n        <input\r\n          className={styles.CustomerForm__input}\r\n          type=\"text\"\r\n          name=\"company\"\r\n          value={company}\r\n          htmlFor={companyInputId}\r\n          onChange={handleChange}\r\n          placeholder=\"Company\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label\r\n        className={styles.CustomerForm__label}\r\n        htmlFor={phoneNumberInputId}\r\n      >\r\n        <input\r\n          className={styles.CustomerForm__input}\r\n          type=\"tel\"\r\n          name=\"phoneNumber\"\r\n          value={phoneNumber}\r\n          htmlFor={phoneNumberInputId}\r\n          onChange={handleChange}\r\n          placeholder=\"Number\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={styles.CustomerForm__label} htmlFor={emailInputId}>\r\n        <input\r\n          className={styles.CustomerForm__input}\r\n          type=\"email\"\r\n          name=\"email\"\r\n          value={email}\r\n          htmlFor={emailInputId}\r\n          onChange={handleChange}\r\n          placeholder=\"Email\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={styles.CustomerForm__label} htmlFor={countryInputId}>\r\n        <input\r\n          className={styles.CustomerForm__input}\r\n          type=\"text\"\r\n          name=\"country\"\r\n          value={country}\r\n          htmlFor={countryInputId}\r\n          onChange={handleChange}\r\n          placeholder=\"Country\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <label className={styles.CustomerForm__label} htmlFor={statusInputId}>\r\n        <input\r\n          className={styles.CustomerForm__input}\r\n          type=\"text\"\r\n          name=\"status\"\r\n          value={status}\r\n          htmlFor={statusInputId}\r\n          onChange={handleChange}\r\n          placeholder=\"Status: Active or Inactive\"\r\n          required\r\n        />\r\n      </label>\r\n\r\n      <Button type=\"submit\" variant=\"outlined\">\r\n        Add customer\r\n      </Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CustomerForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"CustomerList\":\"CustomerList_CustomerList__oPLFd\",\"CustomerList__table\":\"CustomerList_CustomerList__table__115XV\",\"CustomerList__tableRowHead\":\"CustomerList_CustomerList__tableRowHead__MNP4r\",\"CustomerList__tableHeading\":\"CustomerList_CustomerList__tableHeading__x64vU\",\"CustomerList__tableRowBody\":\"CustomerList_CustomerList__tableRowBody__dTddj\",\"CustomerList__tableData\":\"CustomerList_CustomerList__tableData__Zwr4D\",\"CustomerList__tableDataStatusActive\":\"CustomerList_CustomerList__tableDataStatusActive__Tm5Fi\",\"CustomerList__tableDataStatusInactive\":\"CustomerList_CustomerList__tableDataStatusInactive__l0IIM\"};","import { useState, useEffect } from \"react\";\r\n\r\nconst usePagination = ({ contentPerPage, count }) => {\r\n  const [page, setPage] = useState(1);\r\n  const [gaps, setGaps] = useState({\r\n    before: false,\r\n    paginationGroup: [],\r\n    after: true,\r\n  });\r\n\r\n  const pageCount = Math.ceil(count / contentPerPage);\r\n  const lastContentIndex = page * contentPerPage;\r\n  const firstContentIndex = lastContentIndex - contentPerPage;\r\n  const [pagesInBetween, setPagesInBetween] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (pageCount > 2) {\r\n      const temp = new Array(pageCount - 2).fill(1).map((_, i) => i + 2);\r\n      setPagesInBetween(temp);\r\n    }\r\n  }, [pageCount]);\r\n\r\n  useEffect(() => {\r\n    const currentLocation = pagesInBetween.indexOf(page);\r\n    let paginationGroup = [];\r\n    let before = false;\r\n    let after = false;\r\n    if (page === 1) {\r\n      paginationGroup = pagesInBetween.slice(0, 3);\r\n    } else if (\r\n      page === pageCount ||\r\n      page === pageCount - 1 ||\r\n      page === pageCount - 2\r\n    ) {\r\n      paginationGroup = pagesInBetween.slice(-3, pageCount);\r\n    } else if (page === 2) {\r\n      paginationGroup = pagesInBetween.slice(\r\n        currentLocation,\r\n        currentLocation + 3\r\n      );\r\n    } else {\r\n      paginationGroup = [page - 1, page, page + 1];\r\n    }\r\n    if (pageCount <= 4) {\r\n      before = false;\r\n      after = false;\r\n    } else {\r\n      before = false;\r\n      after = false;\r\n      if (paginationGroup[0] > 2) {\r\n        before = true;\r\n      }\r\n      if (paginationGroup[2] < pageCount - 1) {\r\n        after = true;\r\n      }\r\n    }\r\n    setGaps({ paginationGroup, before, after });\r\n  }, [page, pagesInBetween, pageCount]);\r\n\r\n  const changePage = (direction) => {\r\n    setPage((state) => {\r\n      if (direction) {\r\n        if (state === pageCount) {\r\n          return state;\r\n        }\r\n        return state + 1;\r\n      } else {\r\n        if (state === 1) {\r\n          return state;\r\n        }\r\n        return state - 1;\r\n      }\r\n    });\r\n  };\r\n\r\n  const setPageSAFE = (num) => {\r\n    if (num > pageCount) {\r\n      setPage(pageCount);\r\n    } else if (num < 1) {\r\n      setPage(1);\r\n    } else {\r\n      setPage(num);\r\n    }\r\n  };\r\n\r\n  return {\r\n    totalPages: pageCount,\r\n    nextPage: () => changePage(true),\r\n    prevPage: () => changePage(false),\r\n    setPage: setPageSAFE,\r\n    firstContentIndex,\r\n    lastContentIndex,\r\n    page,\r\n    gaps,\r\n  };\r\n};\r\n\r\nexport default usePagination;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getVisibleCustomers } from \"../../../redux/customers/customers-selectors\";\r\nimport styles from \"./CustomerList.module.scss\";\r\nimport \"../../../styles/_pagination.scss\";\r\nimport usePagination from \"../../../helpers/usePagination\";\r\n\r\nconst CustomerList = () => {\r\n  const customers = useSelector(getVisibleCustomers);\r\n\r\n  const {\r\n    firstContentIndex,\r\n    lastContentIndex,\r\n    nextPage,\r\n    prevPage,\r\n    page,\r\n    gaps,\r\n    setPage,\r\n    totalPages,\r\n  } = usePagination({\r\n    contentPerPage: 8,\r\n    count: customers.length,\r\n  });\r\n\r\n  return (\r\n    <div className={styles.CustomerList}>\r\n      <table className={styles.CustomerList__table}>\r\n        <thead>\r\n          <tr className={styles.CustomerList__tableRowHead}>\r\n            <th className={styles.CustomerList__tableHeading}>Customer Name</th>\r\n            <th className={styles.CustomerList__tableHeading}>Company</th>\r\n            <th className={styles.CustomerList__tableHeading}>Phone Number</th>\r\n            <th className={styles.CustomerList__tableHeading}>Email</th>\r\n            <th className={styles.CustomerList__tableHeading}>Country</th>\r\n            <th className={styles.CustomerList__tableHeading}>Status</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        {customers\r\n          ?.slice(firstContentIndex, lastContentIndex)\r\n          .map(\r\n            ({\r\n              id,\r\n              customerName,\r\n              company,\r\n              phoneNumber,\r\n              email,\r\n              country,\r\n              status,\r\n            }) => (\r\n              <tbody className={styles.CustomerList__tableBody} key={id}>\r\n                <tr className={styles.CustomerList__tableRowBody}>\r\n                  <td\r\n                    className={styles.CustomerList__tableData}\r\n                    style={{ width: \"19.4%\" }}\r\n                  >\r\n                    {customerName}\r\n                  </td>\r\n                  <td\r\n                    className={styles.CustomerList__tableData}\r\n                    style={{ width: \"14.8%\" }}\r\n                  >\r\n                    {company}\r\n                  </td>\r\n                  <td\r\n                    className={styles.CustomerList__tableData}\r\n                    style={{ width: \"17.6%\" }}\r\n                  >\r\n                    {phoneNumber}\r\n                  </td>\r\n                  <td\r\n                    className={styles.CustomerList__tableData}\r\n                    style={{ width: \"23.4%\" }}\r\n                  >\r\n                    {email}\r\n                  </td>\r\n                  <td\r\n                    className={styles.CustomerList__tableData}\r\n                    style={{ width: \"15.8%\" }}\r\n                  >\r\n                    {country}\r\n                  </td>\r\n\r\n                  {status === \"Active\" && (\r\n                    <td style={{ width: \"9%\" }}>\r\n                      <span\r\n                        className={styles.CustomerList__tableDataStatusActive}\r\n                      >\r\n                        Active\r\n                      </span>\r\n                    </td>\r\n                  )}\r\n\r\n                  {status === \"Inactive\" && (\r\n                    <td style={{ width: \"9%\" }}>\r\n                      <span\r\n                        className={styles.CustomerList__tableDataStatusInactive}\r\n                      >\r\n                        Inactive\r\n                      </span>\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              </tbody>\r\n            )\r\n          )}\r\n      </table>\r\n\r\n      <div className=\"CustomerList__pagination\">\r\n        <p className=\"CustomerList__pagination-text\">\r\n          Showing data 1 to 8 of {customers.length} entries\r\n        </p>\r\n        <div className=\"CustomerList__pagination-buttons\">\r\n          <button\r\n            onClick={prevPage}\r\n            className={`page ${page === 1 && \"page--disabled\"}`}\r\n          >\r\n            <svg\r\n              className=\"CustomerList__pagination-icon\"\r\n              width=\"5\"\r\n              height=\"7\"\r\n              viewBox=\"0 0 5 7\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path d=\"M2.936 6.392L0.176 3.668L2.936 0.944H4.664L1.892 3.668L4.664 6.392H2.936Z\" />\r\n            </svg>\r\n          </button>\r\n          <button\r\n            onClick={() => setPage(1)}\r\n            className={`page ${page === 1 && \"page--disabled\"}`}\r\n          >\r\n            1\r\n          </button>\r\n          {gaps.before ? (\r\n            <div className=\"CustomerList__pagination-dots\">\r\n              <span className=\"CustomerList__pagination-dotsSpan\">...</span>\r\n            </div>\r\n          ) : null}\r\n\r\n          {gaps.paginationGroup.map((el) => (\r\n            <button\r\n              onClick={() => setPage(el)}\r\n              key={el}\r\n              className={`page ${page === el ? \"page--active\" : \"\"}`}\r\n            >\r\n              {el}\r\n            </button>\r\n          ))}\r\n          {gaps.after ? (\r\n            <div className=\"CustomerList__pagination-dots\">\r\n              <span className=\"CustomerList__pagination-dotsSpan\">...</span>\r\n            </div>\r\n          ) : null}\r\n          <button\r\n            onClick={() => setPage(totalPages)}\r\n            className={`page ${page === totalPages && \"page--disabled\"}`}\r\n          >\r\n            {totalPages}\r\n          </button>\r\n          <button\r\n            onClick={nextPage}\r\n            className={`page ${page === totalPages && \"page--disabled\"}`}\r\n          >\r\n            <svg\r\n              className=\"CustomerList__pagination-icon\"\r\n              width=\"5\"\r\n              height=\"7\"\r\n              viewBox=\"0 0 5 7\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path d=\"M0.344 0.944H2.072L4.832 3.668L2.072 6.392H0.344L3.116 3.668L0.344 0.944Z\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"FilterCustomer\":\"FilterCustomer_FilterCustomer__u1Gso\",\"FilterCustomer__icon\":\"FilterCustomer_FilterCustomer__icon__HsO1Q\",\"FilterCustomer__input\":\"FilterCustomer_FilterCustomer__input__0iJyf\"};","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getFilter } from \"../../../redux/customers/customers-selectors\";\r\nimport { changesFilter } from \"../../../redux/customers/customers-actions\";\r\nimport styles from \"./FilterCustomer.module.scss\";\r\n\r\nconst FilterCustomer = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className={styles.FilterCustomer}>\r\n      <img\r\n        className={styles.FilterCustomer__icon}\r\n        src={require(\"../../../images/search.svg\").default}\r\n        alt=\"search\"\r\n      />\r\n      <input\r\n        className={styles.FilterCustomer__input}\r\n        type=\"text\"\r\n        value={value}\r\n        placeholder=\"Search\"\r\n        onChange={(e) => dispatch(changesFilter(e.currentTarget.value))}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterCustomer;\r\n","import { useState } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport CustomerForm from \"../components/Customer/CustomerForm\";\r\nimport CustomerList from \"../components/Customer/CustomerList\";\r\nimport FilterCustomer from \"../components/Customer/FilterCustomer\";\r\nimport Title from \"../components/Title\";\r\nimport \"../styles/_customersPage.scss\";\r\n\r\nfunction CustomersPage() {\r\n  const [isActive, setIsActive] = useState(false);\r\n  const handleInputFocus = () => {\r\n    setIsActive(true);\r\n  };\r\n\r\n  const handleInputBlur = () => {\r\n    setIsActive(false);\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        onClick={handleInputFocus}\r\n        style={{\r\n          cursor: \"pointer\",\r\n        }}\r\n      >\r\n        <Title title=\"All Customers\" />\r\n      </div>\r\n      <p className=\"activeMembers\">Active Members</p>\r\n\r\n      {isActive && (\r\n        <>\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outlined\"\r\n            onClick={handleInputBlur}\r\n            sx={{ ml: 5 }}\r\n          >\r\n            Go out\r\n          </Button>\r\n          <CustomerForm />\r\n        </>\r\n      )}\r\n\r\n      {!isActive && (\r\n        <>\r\n          <FilterCustomer />\r\n          <CustomerList />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CustomersPage;\r\n"],"names":["title","className","styles","getCustomers","state","customers","items","getFilter","filter","getVisibleCustomers","normalizedFilter","toLowerCase","customerName","includes","useState","setCustomerName","company","setCompany","phoneNumber","setPhoneNumber","email","setEmail","country","setCountry","status","setStatus","useSelector","dispatch","useDispatch","customerNameInputId","nanoid","companyInputId","phoneNumberInputId","emailInputId","countryInputId","statusInputId","handleChange","e","currentTarget","name","value","onSubmit","preventDefault","normalizedName","isNameInCustomers","some","customer","toast","addCustomers","htmlFor","type","onChange","placeholder","pattern","required","Button","variant","contentPerPage","count","page","setPage","before","paginationGroup","after","gaps","setGaps","pageCount","Math","ceil","lastContentIndex","firstContentIndex","pagesInBetween","setPagesInBetween","useEffect","temp","Array","fill","map","_","i","currentLocation","indexOf","slice","changePage","direction","totalPages","nextPage","prevPage","num","usePagination","length","id","style","width","onClick","height","viewBox","xmlns","d","el","src","require","alt","changesFilter","isActive","setIsActive","cursor","Title","sx","ml"],"sourceRoot":""}