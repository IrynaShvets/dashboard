{"version":3,"file":"static/js/508.5d9c69e9.chunk.js","mappings":"wVACA,EAA6B,+BAA7B,EAA+E,qC,SCmBzEA,GAAQC,EAAAA,EAAAA,KAoId,MAlIA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAA0BC,EAAAA,EAAAA,UAAS,kBAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,cAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOL,EAASM,GAClB,IAAK,WACH,OAAOJ,EAAYI,GACrB,QACE,OAEL,EASD,OACE,SAACC,EAAA,EAAD,CAAeb,MAAOA,EAAtB,UACE,gBAAKc,UAAWC,EAAhB,UACE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAAf,WACE,SAACC,EAAA,GAAD,KACA,SAACF,EAAA,GAAD,CACEG,MAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,CACFC,gBAAiB,0CACjBC,iBAAkB,YAClBC,gBAAiB,SAACC,GAAD,MACI,UAAnBA,EAAEC,QAAQC,KACNF,EAAEC,QAAQE,KAAK,IACfH,EAAEC,QAAQE,KAAK,IAHJ,EAIjBC,eAAgB,QAChBC,mBAAoB,aAGxB,SAAChB,EAAA,GAAD,CACEG,MAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJW,UAAWC,EAAAA,EACXC,UAAW,EACXC,QAAM,EAPR,UASE,UAACC,EAAA,EAAD,CACEd,GAAI,CACFe,GAAI,EACJC,GAAI,EACJC,QAAS,OACTC,cAAe,SACfC,WAAY,UANhB,WASE,SAACC,EAAA,EAAD,CAAQpB,GAAI,CAAEqB,EAAG,EAAGC,QAAS,WAA7B,UACE,SAACC,EAAA,EAAD,OAEF,SAACC,EAAA,EAAD,CAAYd,UAAU,KAAKe,QAAQ,KAAnC,sBAGA,UAACX,EAAA,EAAD,CACEJ,UAAU,OACVgB,YAAU,EACVC,SAvDO,SAACC,GACpBA,EAAEC,iBACFlD,EAASmD,EAAAA,EAAAA,MAAiB,CAAEhD,MAAAA,EAAOE,SAAAA,KACnCD,EAAS,IACTE,EAAY,GACb,EAmDae,GAAI,CAAE+B,GAAI,GAJZ,WAME,SAACC,EAAA,EAAD,CACEC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACTC,GAAG,QACHC,MAAM,gBACNjD,KAAK,QACLkD,aAAa,QACbC,WAAS,EACTlD,MAAOP,EACP0D,SAAUtD,KAEZ,SAAC8C,EAAA,EAAD,CACEC,OAAO,SACPC,UAAQ,EACRC,WAAS,EACT/C,KAAK,WACLiD,MAAM,WACNI,KAAK,WACLL,GAAG,WACHE,aAAa,mBACbjD,MAAOL,EACPwD,SAAUtD,KAEZ,SAACwD,EAAA,EAAD,CACEC,SAAS,SAACC,EAAA,EAAD,CAAUvD,MAAM,WAAWwD,MAAM,YAC1CR,MAAM,iBAER,SAACS,EAAA,EAAD,CACEL,KAAK,SACLN,WAAS,EACTV,QAAQ,YACRzB,GAAI,CAAE+B,GAAI,EAAGgB,GAAI,GAJnB,sBAQA,SAACtD,EAAA,GAAD,CAAMC,WAAS,EAAf,UACE,SAACD,EAAA,GAAD,CAAMG,MAAI,EAAV,UACE,SAAC,KAAD,CACEoD,GAAI,YACJzD,UAAWC,EAFb,8DAenB,E,UCtID,MAXA,WACE,IAAMyD,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAE9B,OACE,iCACE,SAAC,EAAD,IACCF,IAAa,SAACG,EAAA,EAAD,MAGnB,C","sources":["webpack://dashboard/./src/components/SignInSide/SignInSide.module.scss?e6f4","components/SignInSide/SignInSide.js","pages/LoginPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"SignInSide\":\"SignInSide_SignInSide__vHj73\",\"SignInSide__link\":\"SignInSide_SignInSide__link__id+uo\"};","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  CssBaseline,\r\n  TextField,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Paper,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport operations from \"../../redux/auth/auth-operations\";\r\nimport styles from \"./SignInSide.module.scss\";\r\n\r\nconst theme = createTheme();\r\n\r\nfunction SignInSide() {\r\n  const dispatch = useDispatch();\r\n\r\n  const [email, setEmail] = useState(\"evano1@ukr.net\");\r\n  const [password, setPassword] = useState(\"1234567890\");\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case \"email\":\r\n        return setEmail(value);\r\n      case \"password\":\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(operations.logIn({ email, password }));\r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className={styles.SignInSide}>\r\n        <Grid container>\r\n          <CssBaseline />\r\n          <Grid\r\n            item\r\n            xs={4}\r\n            sm={4}\r\n            md={7}\r\n            sx={{\r\n              backgroundImage: \"url(https://source.unsplash.com/random)\",\r\n              backgroundRepeat: \"no-repeat\",\r\n              backgroundColor: (t) =>\r\n                t.palette.mode === \"light\"\r\n                  ? t.palette.grey[50]\r\n                  : t.palette.grey[900],\r\n              backgroundSize: \"cover\",\r\n              backgroundPosition: \"center\",\r\n            }}\r\n          />\r\n          <Grid\r\n            item\r\n            xs={8}\r\n            sm={8}\r\n            md={5}\r\n            component={Paper}\r\n            elevation={6}\r\n            square\r\n          >\r\n            <Box\r\n              sx={{\r\n                my: 9,\r\n                mx: 3,\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Avatar sx={{ m: 1, bgcolor: \"#5932ea\" }}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n              </Typography>\r\n              <Box\r\n                component=\"form\"\r\n                noValidate\r\n                onSubmit={handleSubmit}\r\n                sx={{ mt: 1 }}\r\n              >\r\n                <TextField\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  autoComplete=\"email\"\r\n                  autoFocus\r\n                  value={email}\r\n                  onChange={handleChange}\r\n                />\r\n                <TextField\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  value={password}\r\n                  onChange={handleChange}\r\n                />\r\n                <FormControlLabel\r\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                  label=\"Remember me\"\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{ mt: 3, mb: 2 }}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                <Grid container>\r\n                  <Grid item>\r\n                    <NavLink\r\n                      to={\"/register\"}\r\n                      className={styles.SignInSide__link}\r\n                    >\r\n                      Don't have an account? Sign Up\r\n                    </NavLink>\r\n                  </Grid>\r\n                </Grid>\r\n              </Box>\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default SignInSide;\r\n","import { useSelector } from 'react-redux';\r\nimport Loader from '../components/Loader';\r\nimport SignInSide from '../components/SignInSide';\r\nimport { getSelectorLoading } from '../redux/auth/auth-selectors';\r\n\r\nfunction LoginPage() {\r\n  const isLoading = useSelector(getSelectorLoading);\r\n\r\n  return (\r\n    <>\r\n      <SignInSide />\r\n      {isLoading && <Loader />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"names":["theme","createTheme","dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleChange","target","name","value","ThemeProvider","className","styles","Grid","container","CssBaseline","item","xs","sm","md","sx","backgroundImage","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","component","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","noValidate","onSubmit","e","preventDefault","operations","mt","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","onChange","type","FormControlLabel","control","Checkbox","color","Button","mb","to","isLoading","useSelector","getSelectorLoading","Loader"],"sourceRoot":""}